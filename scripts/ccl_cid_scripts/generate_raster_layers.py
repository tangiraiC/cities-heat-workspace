from raster_utils import (
    check_and_reproject,
    replace_pixel_values_with_condition,
    match_raster_shape,
    generate_masked_tif_using_tif,
    generate_masked_tif_using_geojson,
    convert_pixel_values_to_int,
    replace_nans_in_raster_with,
    replace_pixel_values_between_exclusive,
    convert_to_cog_and_validate,
    generate_raster_layer_filename,
)
from vector_utils import reproject_geojson
from rasterio.enums import Resampling
from network_utils import download_file_from_url, upload_file_to_s3_bucket
from typing import List, Tuple, Union
import shutil
import sys
import os


def process_raster_layer(
    source_urls: List[str],
    layer_id: str,
    city_id: str,
    aoi_id: str,
    year: str,
    destination_bucket: str,
    destination_path: str,
    data_dir: str,
    dry_run: bool = False,
) -> Union[str, None]:
    """
    Given the specified parameters this function downloads the source TIF
    generated by the data team, does some standard preprocessing
    (conversion to EPSG 4326), the processing required for the layer,
    followed by some standard post processing (conversion to COG) and
    uploads the TIF and COG to the specified S3 location.
    """
    try:
        os.makedirs(data_dir, exist_ok=True)

        # Standard preprocessing
        layer_filename_without_extension, error = generate_raster_layer_filename(
            city_id, aoi_id, layer_id, year
        )
        if error:
            raise Exception(error)
        layer_filename = f"{layer_filename_without_extension}.tif"

        local_tif_path_with_filename = (
            os.path.join(data_dir, layer_filename_without_extension) + "_tif.tif"
        )

        local_cog_path_with_filename = (
            os.path.join(data_dir, layer_filename_without_extension) + "_cog.tif"
        )
        s3_tif_path_with_filename = os.path.join(
            destination_path, "tif", layer_filename
        )
        s3_cog_path_with_filename = os.path.join(
            destination_path, "cog", layer_filename
        )
        print(f"\n\nProcessing layer {layer_id} for AOI {aoi_id} in city {city_id}\n")
        """
        print(
            local_cog_path_with_filename,
            local_tif_path_with_filename,
            s3_tif_path_with_filename,
            s3_cog_path_with_filename,
        )
        """

        local_source_files = []
        for source_url in source_urls:
            local_source_filename = os.path.join(data_dir, os.path.basename(source_url))
            local_source_files.append(local_source_filename)

            print(f"Downloading {source_url} to {local_source_filename}")
            error = download_file_from_url(source_url, local_source_filename)
            if error:
                raise Exception(error)
            # Standard post processing
            _, ext = os.path.splitext(local_source_filename)
            if ext == ".tif":
                error = check_and_reproject(local_source_filename)
            elif ext == ".geojson":
                error = reproject_geojson(local_source_filename)
            if error:
                raise Exception(error)
        if len(source_urls) == 1:
            # Only one source URL to deal with so we will work on this itself.
            shutil.copy(local_source_files[0], local_tif_path_with_filename)
        else:
            # There is a mask file so first match sizes and mask the file.
            mask_files_list = local_source_files[:-1]
            src_file_path = local_source_files[-1]
            # error = _replace_nans_in_raster_with(src_file_path, -999)
            # if error:
            #    raise Exception(error)
            for idx, mask_file_path in enumerate(mask_files_list):
                _, mask_ext = os.path.splitext(mask_file_path)
                if (
                    layer_id
                    in [
                        "tree_cover_baseline_pedestrian_areas",
                    ]
                    and mask_ext == ".tif"
                ):
                    error = replace_pixel_values_with_condition(
                        mask_file_path, 0, 1, ">"
                    )
                    if error:
                        raise Exception(error)
                if idx == 0:
                    sf_path = src_file_path
                else:
                    sf_path = local_tif_path_with_filename

                if mask_ext == ".tif":
                    # Now match the sizes of the mask and original and generated the masked file.
                    error = match_raster_shape(
                        mask_file_path,
                        sf_path,
                        mask_file_path,
                        resampling_method=Resampling.nearest,
                    )
                    if error:
                        raise Exception(error)
                    error = generate_masked_tif_using_tif(
                        mask_file_path, sf_path, local_tif_path_with_filename
                    )
                elif mask_ext == ".geojson":
                    error = generate_masked_tif_using_geojson(
                        mask_file_path,
                        sf_path,
                        local_tif_path_with_filename,
                    )
                if error:
                    raise Exception(error)
            # pixel_values, error = _get_unique_pixel_values(local_tif_path_with_filename)
            # print(pixel_values)
        print("Starting to process")

        # Layer specific processing

        if layer_id in [
            "pedestrian_areas",
            "plantable_areas",
            "buildings_areas",
            "non_buildings_areas",
        ]:
            # Recode pixel values “0” to -999 to show them transparent in the app. CHECKED
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, -999, "=="
            )
            if error:
                raise Exception(error)
        elif layer_id in [
            "trees_cover_baseline",
            "trees_cover_achievable",
        ]:
            # create the tif by converting trees height to binary raster (1 = tree, -999: no tree)
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, 1, ">"
            )
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, -999, "=="
            )
            if error:
                raise Exception(error)
            error = convert_pixel_values_to_int(local_tif_path_with_filename)
            if error:
                raise Exception(error)
        elif layer_id in [
            "tree_cover_baseline_pedestrian_areas",
        ]:
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, 1, ">"
            )
            if error:
                raise Exception(error)
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, numpy.nan, -999, "=="
            )
            if error:
                raise Exception(error)
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, -999, "=="
            )
            if error:
                raise Exception(error)
        elif layer_id in [
            "shade_1200_baseline",
            "shade_1500_baseline",
            "shade_1800_baseline",
            "shade_1200_street_trees_achievable",
            "shade_1500_street_trees_achievable",
            "shade_1800_street_trees_achievable",
            "shade_1500_baseline_pedestrian_areas",
            "shade_1200_baseline_parks_areas",
            "shade_1500_baseline_parks_areas",
            "shade_1800_baseline_parks_areas",
            "shade_1500_street_trees_achievable_pedestrian_areas",
        ]:
            # Original files have 1 = No shade AND 0 = Building Shade
            # convert pixel values to (-999 = no shade/no data,  0 = building shade, 2 = tree shade).
            error = replace_pixel_values_between_exclusive(
                local_tif_path_with_filename, 0, 1, 2
            )
            if error:
                raise Exception(error)
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 1, -999, "=="
            )
            if error:
                raise Exception(error)
            error = convert_pixel_values_to_int(local_tif_path_with_filename)
            if error:
                raise Exception(error)
            # pixel_values, error = _get_unique_pixel_values(local_tif_path_with_filename)
            # print(pixel_values)
        elif layer_id in [
            "shade_1200_street_trees_achievable_vs_baseline",
            "shade_1500_street_trees_achievable_vs_baseline",
            "shade_1800_street_trees_achievable_vs_baseline",
        ]:
            error = replace_nans_in_raster_with(local_tif_path_with_filename, 999)
            if error:
                raise Exception(error)

            # Show shade gains by replacing all -.97 values with 1
            error = replace_pixel_values_between_exclusive(
                local_tif_path_with_filename, -1, 0, 1
            )
            if error:
                raise Exception(error)

            # replace 0.97 with -999
            error = replace_pixel_values_between_exclusive(
                local_tif_path_with_filename, 0, 1, -999
            )
            if error:
                raise Exception(error)

            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, -999, "=="
            )
            if error:
                raise Exception(error)

            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 999, -999, "=="
            )
            if error:
                raise Exception(error)

            error = convert_pixel_values_to_int(local_tif_path_with_filename)
            if error:
                raise Exception(error)

            # pixel_values, error = _get_unique_pixel_values(local_tif_path_with_filename)
            # if error:
            #     raise Exception(error)

            # print("Unique pixels in final file : ", pixel_values)
        elif layer_id in [
            "shade_1200_park_shade_achievable",
            "shade_1500_park_shade_achievable",
            "shade_1800_park_shade_achievable",
            "shade_1200_park_shade_achievable_parks_areas",
            "shade_1500_park_shade_achievable_parks_areas",
            "shade_1800_park_shade_achievable_parks_areas",
            "shade_1200_park_shade_achievable_shade_structure_areas",
            "shade_1500_park_shade_achievable_shade_structure_areas",
            "shade_1800_park_shade_achievable_shade_structure_areas",
            "shade_1200_park_shade_achievable_vs_baseline",
            "shade_1500_park_shade_achievable_vs_baseline",
            "shade_1800_park_shade_achievable_vs_baseline",
            "shade_1200_park_shade_achievable_vs_baseline_parks_areas",
            "shade_1500_park_shade_achievable_vs_baseline_parks_areas",
            "shade_1800_park_shade_achievable_vs_baseline_parks_areas",
            "shade_1200_park_shade_achievable_vs_baseline_shade_structure_areas",
            "shade_1500_park_shade_achievable_vs_baseline_shade_structure_areas",
            "shade_1800_park_shade_achievable_vs_baseline_shade_structure_areas",
        ]:
            # 1 indicates new shade and 0 indicates no change so convert 0s to -999
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, -999, "=="
            )
            if error:
                raise Exception(error)
        elif layer_id in [
            "tree_cover_baseline",
            "tree_cover_achievable",
            "tree_cover_simulated_achievable",
        ]:
            # Trees = 1, No Trees = 0 so convert to -999 to make it transparent in the map
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, 1, ">"
            )
            if error:
                raise Exception(error)
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, -999, "<="
            )
            if error:
                raise Exception(error)
        elif layer_id in [
            "albedo_baseline",
            "albedo_cool_roofs_achievable",
            "utci_1200_baseline",
            "utci_1500_baseline",
            "utci_1800_baseline",
            "utci_1200_street_trees_achievable",
            "utci_1500_street_trees_achievable",
            "utci_1800_street_trees_achievable",
            "utci_1200_park_shade_achievable",
            "utci_1500_park_shade_achievable",
            "utci_1800_park_shade_achievable",
            "utci_1200_cool_roofs_achievable",
            "utci_1500_cool_roofs_achievable",
            "utci_1800_cool_roofs_achievable",
            "utci_1200_cool_roofs_non_buildings",
            "utci_1500_cool_roofs_non_buildings",
            "utci_1800_cool_roofs_non_buildings",
            "utci_1500_baseline_pedestrian_areas",
            "utci_1500_street_trees_achievable_pedestrian_areas",
            "utci_1200_baseline_parks_areas",
            "utci_1500_baseline_parks_areas",
            "utci_1800_baseline_parks_areas",
            "utci_1200_park_shade_achievable_parks_areas",
            "utci_1500_park_shade_achievable_parks_areas",
            "utci_1800_park_shade_achievable_parks_areas",
            "utci_1200_park_shade_achievable_shade_structure_areas",
            "utci_1500_park_shade_achievable_shade_structure_areas",
            "utci_1800_park_shade_achievable_shade_structure_areas",
            "albedo_cool_roofs_achievable_buildings_areas",
        ]:
            # No extra processing
            pass
        elif layer_id in [
            "tree_cover_achievable_pedestrian_areas",
        ]:
            # error = _replace_nans_in_raster_with(local_tif_path_with_filename, -999)
            # if error:
            #    raise Exception(error)

            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 1, -999, "!="
            )
            if error:
                raise Exception(error)
        elif layer_id in [
            "albedo_achievable_vs_baseline",
            "albedo_achievable_vs_baseline_buildings_areas",
        ]:
            error = replace_nans_in_raster_with(local_tif_path_with_filename, -999)
            if error:
                raise Exception(error)
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, 0, -999, "<="
            )
            if error:
                raise Exception(error)
        elif layer_id in [
            "utci_1200_street_trees_achievable_vs_baseline",
            "utci_1500_street_trees_achievable_vs_baseline",
            "utci_1800_street_trees_achievable_vs_baseline",
            "utci_1200_cool_roofs_achievable_vs_baseline",
            "utci_1500_cool_roofs_achievable_vs_baseline",
            "utci_1800_cool_roofs_achievable_vs_baseline",
            "utci_1200_park_shade_achievable_vs_baseline",
            "utci_1500_park_shade_achievable_vs_baseline",
            "utci_1800_park_shade_achievable_vs_baseline",
            "utci_1200_park_shade_achievable_vs_baseline_parks_areas",
            "utci_1500_park_shade_achievable_vs_baseline_parks_areas",
            "utci_1800_park_shade_achievable_vs_baseline_parks_areas",
            "utci_1200_park_shade_achievable_vs_baseline_shade_structure_areas",
            "utci_1500_park_shade_achievable_vs_baseline_shade_structure_areas",
            "utci_1800_park_shade_achievable_vs_baseline_shade_structure_areas",
            "utci_1200_cool_roofs_achievable_vs_baseline_non_buildings",
            "utci_1500_cool_roofs_achievable_vs_baseline_non_buildings",
            "utci_1800_cool_roofs_achievable_vs_baseline_non_buildings",
        ]:
            error = replace_nans_in_raster_with(local_tif_path_with_filename, -999)
            if error:
                raise Exception(error)
            error = replace_pixel_values_with_condition(
                local_tif_path_with_filename, -1, -999, ">"
            )
            if error:
                raise Exception(error)

        else:
            raise Exception("Unknown layer ID. Dont know what to do.")

        # Standard post processing
        error = check_and_reproject(local_tif_path_with_filename)
        if error:
            raise Exception(error)

        print("Converting to COG")
        error = convert_to_cog_and_validate(
            local_tif_path_with_filename, local_cog_path_with_filename
        )
        if error:
            raise Exception(error)

        if not dry_run:
            print("Uploading TIF to S3..")
            error = upload_file_to_s3_bucket(
                local_tif_path_with_filename,
                destination_bucket,
                s3_tif_path_with_filename,
            )
            if error:
                raise Exception(error)

            print("Uploading COG to S3..")
            error = upload_file_to_s3_bucket(
                local_cog_path_with_filename,
                destination_bucket,
                s3_cog_path_with_filename,
            )
            if error:
                raise Exception(error)
    except Exception as e:
        return f"Error processing Layer {layer_id} for city {city_id}: {str(e)}"
    else:
        return None


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        prog="generate_raster_layers",
        description="Generates raster layers for the CCL and CID applications given a city ID, AOI ID and scenario",
    )
    parser.add_argument(
        "-dd",
        "--data_dir",
        help="Specify a local data directory in which to store downloaded and generated files.",
        action="store",
        dest="data_dir",
        required=True,
    )
    parser.add_argument(
        "-c",
        "--city_id",
        help="Specify the city_id for which the layers need to be generated",
        action="store",
        dest="city_id",
        required=True,
    )
    parser.add_argument(
        "-a",
        "--aoi_id",
        help="Specify the aoi_id for which the layers need to be generated",
        action="store",
        dest="aoi_id",
        required=True,
    )
    parser.add_argument(
        "-s",
        "--scenario",
        choices=["baseline", "cool_roofs", "street_trees", "park_shade"],
        dest="scenario",
        help="Specify the scenario for which the layers need to be generated. If not specified, layers for all scenarios will be generated.",
    )
    parser.add_argument(
        "-d",
        "--dry_run",
        help="Specify this argument to only create the layer locally and not upload the generated layers to S3.",
        default=False,
        action="store_true",
        dest="dry_run",
    )
    parser.add_argument(
        "-l",
        "--layer_id",
        help="Specify a layer ID to process. If not specified, generate all layers for the specified scenario(s)",
        dest="layer_id",
    )
    args = parser.parse_args()
    city_id = args.city_id
    aoi_id = args.aoi_id
    layer_id = args.layer_id
    dry_run = args.dry_run
    scenario = args.scenario
    data_dir = args.data_dir

    baseline_layers = [
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/utci_1500_baseline.tif",
            ],
            "layer_id": "utci_1500_baseline",
            "year": "2023",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/pedestrian-area.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/utci_1500_baseline.tif",
            ],
            "layer_id": "utci_1500_baseline_pedestrian_areas",
            "year": "2023",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/utci_1500_baseline.tif",
            ],
            "layer_id": "utci_1500_baseline_parks_areas",
            "year": "2023",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/shade_1500_baseline.tif",
            ],
            "layer_id": "shade_1500_baseline",
            "year": "2023",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/pedestrian-area.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/shade_1500_baseline.tif",
            ],
            "layer_id": "shade_1500_baseline_pedestrian_areas",
            "year": "2023",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/shade_1500_baseline.tif",
            ],
            "layer_id": "shade_1500_baseline_parks_areas",
            "year": "2023",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/tree_cover_baseline.tif",
            ],
            "layer_id": "tree_cover_baseline",
            "year": "2024",
            "s3_folder": "data/prd/tree_cover",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/pedestrian-area.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/existing-tree-cover.tif",
            ],
            "layer_id": "tree_cover_baseline_pedestrian_areas",
            "year": "2024",
            "s3_folder": "data/prd/tree_cover",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/pedestrian_areas.tif",
            ],
            "layer_id": "pedestrian_areas",
            "year": "2024",
            "s3_folder": "data/prd/pedestrian_areas",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/buildings_areas.tif",
            ],
            "layer_id": "buildings_areas",
            "year": "2025",
            "s3_folder": "data/prd/buildings",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
            ],
            "layer_id": "non_buildings_areas",
            "year": "2025",
            "s3_folder": "data/prd/buildings",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/albedo_baseline.tif",
            ],
            "layer_id": "albedo_baseline",
            "year": "2025",
            "s3_folder": "data/prd/albedo",
        },
    ]
    scenarios_street_trees_layers = [
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/plantable-street.tif",
            ],
            "layer_id": "plantable_areas",
            "year": "2024",
            "s3_folder": "data/prd/plantable_areas",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/utci_1500_street_trees_achievable.tif",
            ],
            "layer_id": "utci_1500_street_trees_achievable",
            "year": "2023",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/shade_1500_street_trees_achievable.tif",
            ],
            "layer_id": "shade_1500_street_trees_achievable",
            "year": "2023",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/tree_cover_achievable.tif",
            ],
            "layer_id": "tree_cover_achievable",
            "year": "2024",
            "s3_folder": "data/prd/tree_cover",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/utci_diff_1500.tif",
            ],
            "layer_id": "utci_1500_street_trees_achievable_vs_baseline",
            "year": "2023",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/shade_diff_1500.tif",
            ],
            "layer_id": "shade_1500_street_trees_achievable_vs_baseline",
            "year": "2023",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/pedestrian-area.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/utci_1500_street_trees_achievable.tif",
            ],
            "layer_id": "utci_1500_street_trees_achievable_pedestrian_areas",
            "year": "2023",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/pedestrian-area.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/shade_1500_street_trees_achievable.tif",
            ],
            "layer_id": "shade_1500_street_trees_achievable_pedestrian_areas",
            "year": "2023",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/street-trees/tree_cover_achievable_pedestrian_areas.tif",
            ],
            "layer_id": "tree_cover_achievable_pedestrian_areas",
            "year": "2024",
            "s3_folder": "data/prd/tree_cover",
        },
    ]
    scenarios_park_shade_structures_layers = [
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1200_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1200_park_shade_achievable",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1500_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1500_park_shade_achievable",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1800_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1800_park_shade_achievable",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1200_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1200_park_shade_achievable_shade_structure_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1500_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1500_park_shade_achievable_shade_structure_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1800_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1800_park_shade_achievable_shade_structure_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1200_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1200_park_shade_achievable_parks_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1500_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1500_park_shade_achievable_parks_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1800_park_shade_achievable.tif",
            ],
            "layer_id": "utci_1800_park_shade_achievable_parks_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1200_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1200_park_shade_achievable_vs_baseline",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1500_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1500_park_shade_achievable_vs_baseline",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1800_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1800_park_shade_achievable_vs_baseline",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1200_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1200_park_shade_achievable_vs_baseline_shade_structure_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1500_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1500_park_shade_achievable_vs_baseline_shade_structure_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1800_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1800_park_shade_achievable_vs_baseline_shade_structure_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1200_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1200_park_shade_achievable_vs_baseline_parks_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1500_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1500_park_shade_achievable_vs_baseline_parks_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/utci_1800_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1800_park_shade_achievable_vs_baseline_parks_areas",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1200_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1200_park_shade_achievable",
            "year": "2025",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1500_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1500_park_shade_achievable",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1800_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1800_park_shade_achievable",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1200_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1200_park_shade_achievable_shade_structure_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1500_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1500_park_shade_achievable_shade_structure_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1800_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1800_park_shade_achievable_shade_structure_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1200_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1200_park_shade_achievable_parks_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1500_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1500_park_shade_achievable_parks_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1800_park_shade_achievable.tif",
            ],
            "layer_id": "shade_1800_park_shade_achievable_parks_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1200_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1200_park_shade_achievable_vs_baseline",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1500_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1500_park_shade_achievable_vs_baseline",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1800_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1800_park_shade_achievable_vs_baseline",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1200_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1200_park_shade_achievable_vs_baseline_shade_structure_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1500_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1500_park_shade_achievable_vs_baseline_shade_structure_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_structures_parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1800_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1800_park_shade_achievable_vs_baseline_shade_structure_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1200_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1200_park_shade_achievable_vs_baseline_parks_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1500_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1500_park_shade_achievable_vs_baseline_parks_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/parks.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/park-shade-structures/shade_1800_park_shade_achievable_vs_baseline.tif",
            ],
            "layer_id": "shade_1800_park_shade_achievable_vs_baseline_parks_areas",
            "year": "2022",
            "s3_folder": "data/prd/shade",
        },
    ]
    scenarios_cool_roofs_layers = [
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/albedo_achievable_vs_baseline.tif",
            ],
            "layer_id": "albedo_achievable_vs_baseline",
            "year": "2025",
            "s3_folder": "data/prd/albedo",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/albedo_achievable_vs_baseline.tif",
            ],
            "layer_id": "albedo_achievable_vs_baseline_buildings_areas",
            "year": "2025",
            "s3_folder": "data/prd/albedo",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/albedo_cool_roofs_achievable.tif",
            ],
            "layer_id": "albedo_cool_roofs_achievable",
            "year": "2025",
            "s3_folder": "data/prd/albedo",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/albedo_cool_roofs_achievable.tif",
            ],
            "layer_id": "albedo_cool_roofs_achievable_buildings_areas",
            "year": "2025",
            "s3_folder": "data/prd/albedo",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1200_cool_roofs_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1200_cool_roofs_achievable_vs_baseline",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1500_cool_roofs_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1500_cool_roofs_achievable_vs_baseline",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1800_cool_roofs_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1800_cool_roofs_achievable_vs_baseline",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1200_cool_roofs_achievable.tif",
            ],
            "layer_id": "utci_1200_cool_roofs_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1500_cool_roofs_achievable.tif",
            ],
            "layer_id": "utci_1500_cool_roofs_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1800_cool_roofs_achievable.tif",
            ],
            "layer_id": "utci_1800_cool_roofs_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1200_cool_roofs_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1200_cool_roofs_achievable_vs_baseline_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1500_cool_roofs_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1500_cool_roofs_achievable_vs_baseline_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1800_cool_roofs_achievable_vs_baseline.tif",
            ],
            "layer_id": "utci_1800_cool_roofs_achievable_vs_baseline_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1200_cool_roofs_achievable.tif",
            ],
            "layer_id": "utci_1200_cool_roofs_achievable",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1500_cool_roofs_achievable.tif",
            ],
            "layer_id": "utci_1500_cool_roofs_achievable",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/cool-roofs/utci_1800_cool_roofs_achievable.tif",
            ],
            "layer_id": "utci_1800_cool_roofs_achievable",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/utci_1200_baseline.tif",
            ],
            "layer_id": "utci_1200_cool_roofs_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/utci_1500_baseline.tif",
            ],
            "layer_id": "utci_1500_cool_roofs_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
        {
            "url": [
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/aoi.geojson",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/non_buildings_areas.tif",
                f"https://wri-cities-heat.s3.us-east-1.amazonaws.com/{city_id}/scenarios/aoi/{aoi_id}/baseline/utci_1800_baseline.tif",
            ],
            "layer_id": "utci_1800_cool_roofs_non_buildings",
            "year": "2025",
            "s3_folder": "data/prd/utci",
        },
    ]
    scenario_layer_list_mapping = {
        "baseline": baseline_layers,
        "cool_roofs": scenarios_cool_roofs_layers,
        "street_trees": scenarios_street_trees_layers,
        "park_shade": scenarios_park_shade_structures_layers,
    }
    if scenario is None:
        scenario_list = [
            baseline_layers,
            scenarios_cool_roofs_layers,
            scenarios_street_trees_layers,
            scenarios_park_shade_structures_layers,
        ]
    else:
        scenario_list = [scenario_layer_list_mapping[scenario]]

    if layer_id is not None:
        print("Checking layer id")
        valid_layer = False
        for scenario_layer_list in scenario_list:
            for layer in scenario_layer_list:
                if layer_id != layer["layer_id"]:
                    continue
                else:
                    valid_layer = True
                    break
            if valid_layer is True:
                break
        if not valid_layer:
            print("The specified layer ID does not exist for the specified scenarios")
            sys.exit(-1)

    for scenario_layer_list in scenario_list:
        for layer in scenario_layer_list:
            if layer_id is not None and layer_id != layer["layer_id"]:
                continue
            error = process_raster_layer(
                layer["url"],
                layer["layer_id"],
                city_id,
                aoi_id,
                layer["year"],
                "wri-cities-data-api",
                layer["s3_folder"],
                data_dir=data_dir,
                dry_run=dry_run,
            )
            if error:
                print(error.upper())
